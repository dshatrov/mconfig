Проблемы, вызванные использованием cpp:
* Токенизация по правилам C++ - это неудобно. Форматы чисел с плавающей запятой
  и IP-адресов пересекаются. С другой стороны, препроцессор умеет работать
  только с целыми числами, поэтому достаточно выделять только их.
* Разрешение на включение произвольных символов в идентификаторы конфликтует
  с условиями #if:
      #if 1+2   // <--- не будет работать по правилам mconfig
      #if 1 + 2 // <--- будет работать
  Это означает, что нужно оставить правила выделения идентификаторов как в C++.
  Как быть с ip-адресами? <- выкручусь, склеивая слова без пробелов (если
  соседние символы - не буквы).

  bind = 1.3.4.5:2314, foo.example.com:123, barney robin

* Правильное решение - склеить результат работы препроцессора в новый исходный
  текст и разобрать этот текс заново по своим правилам.


// Config file syntax example.

section {
    name = value;
    subsection {
	name = "literal";
    }

    subsection2 {
	"long " "literal name" = "literal";
    }

    list = "item", "one more item", "yet another item";

    foo = 1.4.2.5; // IP addr

    // The following is still correct (duh...)
    // THIS SHOULD NOT BE ALLOWED!
    foo = 1   .    344        .              54
	  5 :            8081;
}

// Better version

section {

   one = value_one
   two = value_two

   three = multi \
	   line  \
	   value

}

Чтобы этого добиться, нужно пропускать на вход pargen whitespace. Но тогда нужно
выработать правила, какой whitespace игнорировать, а какой-нет. В общем случае
интересует только перевод строки. Для некоторых применений может также
понадобиться табуляция в начале строки. Все места, где whitespace не должен
игнорироваться, помечаются явно.

! Препроцессор сам умеет склеивать строки. ТО ЕСТЬ фактически нужно заменять
перевод строки на ";".

